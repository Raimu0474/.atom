(function() {
  var GitHistoryView;

  GitHistoryView = require('../lib/git-history-view');

  describe("Git History View Test Suite", function() {
    var TEST_RESPONSE;
    TEST_RESPONSE = "{\"author\": \"John Doe\",\"relativeDate\": \"2 Hours ago\",\"fullDate\": \"2014-09-08\",\"message\": \"Foo Bar with \"quotes\" and {stuff}\",\"hash\": \"12345\"},";
    it("should use 'message' as the filter key", function() {
      var view;
      view = new GitHistoryView();
      return expect(view.getFilterKey()).toBe("message");
    });
    it("should load selected revision", function() {
      var callbackCalled, logItem, passedItem, view;
      logItem = {
        hash: 12345
      };
      view = new GitHistoryView();
      passedItem = null;
      callbackCalled = false;
      view._loadRevision = function(item) {
        passedItem = item;
        return callbackCalled = true;
      };
      view.confirmed(logItem);
      expect(passedItem).toEqual(logItem.hash);
      return expect(callbackCalled).toBe(true);
    });
    it("should load selected revision with diff", function() {
      var callbackCalled, logItem, passedItem, view;
      logItem = {
        hash: 12345
      };
      view = new GitHistoryView();
      view._isDiffEnabled = function() {
        return true;
      };
      passedItem = null;
      callbackCalled = false;
      view._loadRevision = function(item) {
        passedItem = item;
        return callbackCalled = true;
      };
      view.confirmed(logItem);
      expect(passedItem).toEqual(logItem.hash);
      return expect(callbackCalled).toBe(true);
    });
    it("should load selected revision with diff", function() {
      var callbackCalled, logItem, passedItem, view;
      logItem = {
        hash: 12345
      };
      view = new GitHistoryView();
      view._isDiffEnabled = function() {
        return true;
      };
      passedItem = null;
      callbackCalled = false;
      view._loadRevision = function(item) {
        passedItem = item;
        return callbackCalled = true;
      };
      view.confirmed(logItem);
      expect(passedItem).toEqual(logItem.hash);
      return expect(callbackCalled).toBe(true);
    });
    it("should not load git history view upon failure", function() {
      var error, view;
      view = new GitHistoryView();
      error = false;
      view.setError = function() {
        return error = true;
      };
      view._fetchFileHistory = function(stdout, exit) {
        stdout("");
        return exit(128);
      };
      view._loadLogData();
      return expect(error).toBe(true);
    });
    return it("should parse comma delimited objects in string to separate items", function() {
      var logItems, view;
      view = new GitHistoryView();
      logItems = null;
      view._fetchFileHistory = function(stdout, exit) {
        stdout(TEST_RESPONSE + TEST_RESPONSE);
        return exit(0);
      };
      view.setItems = function(items) {
        return logItems = items;
      };
      view._loadLogData();
      return expect(logItems.length).toBe(2);
    });
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAiZmlsZSI6ICIiLAogICJzb3VyY2VSb290IjogIiIsCiAgInNvdXJjZXMiOiBbCiAgICAiQzpcXFVzZXJzXFx4MTNnMDMzXFwuYXRvbVxccGFja2FnZXNcXGdpdC1oaXN0b3J5XFxzcGVjXFxnaXQtaGlzdG9yeS12aWV3LXNwZWMuY29mZmVlIgogIF0sCiAgIm5hbWVzIjogW10sCiAgIm1hcHBpbmdzIjogIkFBQUE7QUFBQSxNQUFBLGNBQUE7O0FBQUEsRUFBQSxjQUFBLEdBQWlCLE9BQUEsQ0FBUSx5QkFBUixDQUFqQixDQUFBOztBQUFBLEVBRUEsUUFBQSxDQUFTLDZCQUFULEVBQXdDLFNBQUEsR0FBQTtBQUNwQyxRQUFBLGFBQUE7QUFBQSxJQUFBLGFBQUEsR0FBZ0IscUtBQWhCLENBQUE7QUFBQSxJQUVBLEVBQUEsQ0FBRyx3Q0FBSCxFQUE2QyxTQUFBLEdBQUE7QUFDekMsVUFBQSxJQUFBO0FBQUEsTUFBQSxJQUFBLEdBQVcsSUFBQSxjQUFBLENBQUEsQ0FBWCxDQUFBO2FBQ0EsTUFBQSxDQUFPLElBQUksQ0FBQyxZQUFMLENBQUEsQ0FBUCxDQUEyQixDQUFDLElBQTVCLENBQWlDLFNBQWpDLEVBRnlDO0lBQUEsQ0FBN0MsQ0FGQSxDQUFBO0FBQUEsSUFNQSxFQUFBLENBQUcsK0JBQUgsRUFBb0MsU0FBQSxHQUFBO0FBQ2hDLFVBQUEseUNBQUE7QUFBQSxNQUFBLE9BQUEsR0FBVTtBQUFBLFFBQUMsSUFBQSxFQUFNLEtBQVA7T0FBVixDQUFBO0FBQUEsTUFDQSxJQUFBLEdBQVcsSUFBQSxjQUFBLENBQUEsQ0FEWCxDQUFBO0FBQUEsTUFHQSxVQUFBLEdBQWEsSUFIYixDQUFBO0FBQUEsTUFJQSxjQUFBLEdBQWlCLEtBSmpCLENBQUE7QUFBQSxNQUtBLElBQUksQ0FBQyxhQUFMLEdBQXFCLFNBQUMsSUFBRCxHQUFBO0FBQ2pCLFFBQUEsVUFBQSxHQUFhLElBQWIsQ0FBQTtlQUNBLGNBQUEsR0FBaUIsS0FGQTtNQUFBLENBTHJCLENBQUE7QUFBQSxNQVNBLElB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

//# sourceURL=/C:/Users/x13g033/.atom/packages/git-history/spec/git-history-view-spec.coffee
